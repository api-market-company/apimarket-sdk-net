// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Api.Imss.Grupo.Idse.CapturarMovimientosAfiliatorios
{
    #pragma warning disable CS1591
    public class CapturarMovimientosAfiliatoriosPostRequestBody_movimientos : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apellidoMaterno property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApellidoMaterno { get; set; }
#nullable restore
#else
        public string ApellidoMaterno { get; set; }
#endif
        /// <summary>The apellidoPaterno property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApellidoPaterno { get; set; }
#nullable restore
#else
        public string ApellidoPaterno { get; set; }
#endif
        /// <summary>Required for &apos;BAJA&apos; movimiento. Valid values are based on the reasonsForLeave array. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CausaDeBaja { get; set; }
#nullable restore
#else
        public string CausaDeBaja { get; set; }
#endif
        /// <summary>The claveDelTrabajador property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaveDelTrabajador { get; set; }
#nullable restore
#else
        public string ClaveDelTrabajador { get; set; }
#endif
        /// <summary>Must be a valid CURP format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Curp { get; set; }
#nullable restore
#else
        public string Curp { get; set; }
#endif
        /// <summary>Date format should be &apos;d-m-Y&apos;. Conditional date range validations apply.</summary>
        public Date? FechaDeMovimiento { get; set; }
        /// <summary>Required for certain types of movimiento. Valid values are based on the journalTypes array. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jornada { get; set; }
#nullable restore
#else
        public string Jornada { get; set; }
#endif
        /// <summary>The nombre property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nombre { get; set; }
#nullable restore
#else
        public string Nombre { get; set; }
#endif
        /// <summary>Must be a valid NSS format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nss { get; set; }
#nullable restore
#else
        public string Nss { get; set; }
#endif
        /// <summary>The registroPatronal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegistroPatronal { get; set; }
#nullable restore
#else
        public string RegistroPatronal { get; set; }
#endif
        /// <summary>Required for certain types of movimiento. Conditional validations apply.</summary>
        public double? SalarioDiarioIntegrado { get; set; }
        /// <summary>Valid values are based on the kindOfMovements array. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TipoDeMovimiento { get; set; }
#nullable restore
#else
        public string TipoDeMovimiento { get; set; }
#endif
        /// <summary>Required for certain types of movimiento. Valid values are based on the salarioTypes array. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TipoDeSalario { get; set; }
#nullable restore
#else
        public string TipoDeSalario { get; set; }
#endif
        /// <summary>Required for &apos;REINGRESO&apos;. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TipoDeTrabajador { get; set; }
#nullable restore
#else
        public string TipoDeTrabajador { get; set; }
#endif
        /// <summary>Required for certain types of movimiento. Conditional validations apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Umf { get; set; }
#nullable restore
#else
        public string Umf { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Api.Imss.Grupo.Idse.CapturarMovimientosAfiliatorios.CapturarMovimientosAfiliatoriosPostRequestBody_movimientos"/> and sets the default values.
        /// </summary>
        public CapturarMovimientosAfiliatoriosPostRequestBody_movimientos()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Api.Imss.Grupo.Idse.CapturarMovimientosAfiliatorios.CapturarMovimientosAfiliatoriosPostRequestBody_movimientos"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Api.Imss.Grupo.Idse.CapturarMovimientosAfiliatorios.CapturarMovimientosAfiliatoriosPostRequestBody_movimientos CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Api.Imss.Grupo.Idse.CapturarMovimientosAfiliatorios.CapturarMovimientosAfiliatoriosPostRequestBody_movimientos();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apellidoMaterno", n => { ApellidoMaterno = n.GetStringValue(); } },
                { "apellidoPaterno", n => { ApellidoPaterno = n.GetStringValue(); } },
                { "causaDeBaja", n => { CausaDeBaja = n.GetStringValue(); } },
                { "claveDelTrabajador", n => { ClaveDelTrabajador = n.GetStringValue(); } },
                { "curp", n => { Curp = n.GetStringValue(); } },
                { "fechaDeMovimiento", n => { FechaDeMovimiento = n.GetDateValue(); } },
                { "jornada", n => { Jornada = n.GetStringValue(); } },
                { "nombre", n => { Nombre = n.GetStringValue(); } },
                { "nss", n => { Nss = n.GetStringValue(); } },
                { "registroPatronal", n => { RegistroPatronal = n.GetStringValue(); } },
                { "salarioDiarioIntegrado", n => { SalarioDiarioIntegrado = n.GetDoubleValue(); } },
                { "tipoDeMovimiento", n => { TipoDeMovimiento = n.GetStringValue(); } },
                { "tipoDeSalario", n => { TipoDeSalario = n.GetStringValue(); } },
                { "tipoDeTrabajador", n => { TipoDeTrabajador = n.GetStringValue(); } },
                { "umf", n => { Umf = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apellidoMaterno", ApellidoMaterno);
            writer.WriteStringValue("apellidoPaterno", ApellidoPaterno);
            writer.WriteStringValue("causaDeBaja", CausaDeBaja);
            writer.WriteStringValue("claveDelTrabajador", ClaveDelTrabajador);
            writer.WriteStringValue("curp", Curp);
            writer.WriteDateValue("fechaDeMovimiento", FechaDeMovimiento);
            writer.WriteStringValue("jornada", Jornada);
            writer.WriteStringValue("nombre", Nombre);
            writer.WriteStringValue("nss", Nss);
            writer.WriteStringValue("registroPatronal", RegistroPatronal);
            writer.WriteDoubleValue("salarioDiarioIntegrado", SalarioDiarioIntegrado);
            writer.WriteStringValue("tipoDeMovimiento", TipoDeMovimiento);
            writer.WriteStringValue("tipoDeSalario", TipoDeSalario);
            writer.WriteStringValue("tipoDeTrabajador", TipoDeTrabajador);
            writer.WriteStringValue("umf", Umf);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
