// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Api.Infonavit.Grupo.ObtenerCuenta
{
    #pragma warning disable CS1591
    public class ObtenerCuentaPostResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Aportación del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Aportacion { get; set; }
#nullable restore
#else
        public string Aportacion { get; set; }
#endif
        /// <summary>Bimestre correspondiente</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bimestre { get; set; }
#nullable restore
#else
        public string Bimestre { get; set; }
#endif
        /// <summary>Fecha de pago, puede estar vacío si no hay fecha de pago</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FechaPago { get; set; }
#nullable restore
#else
        public string FechaPago { get; set; }
#endif
        /// <summary>Nombre de la empresa, puede estar vacío si no hay empresa registrada</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NombreEmpresa { get; set; }
#nullable restore
#else
        public string NombreEmpresa { get; set; }
#endif
        /// <summary>Número de Seguro Social del solicitante</summary>
        public int? NSS { get; set; }
        /// <summary>Saldo anterior del SAR. Se refiere al saldo que existía en la cuenta del trabajador en un período anterior específico. Este saldo no incluye las nuevas aportaciones ni los rendimientos generados desde la última vez que se actualizó el saldo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SaldoAnterior { get; set; }
#nullable restore
#else
        public string SaldoAnterior { get; set; }
#endif
        /// <summary>Saldo del SAR del año 92. Se refiere a las aportaciones realizadas al Sistema de Ahorro para el Retiro antes de la reforma de 1997.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SaldoSAR92 { get; set; }
#nullable restore
#else
        public string SaldoSAR92 { get; set; }
#endif
        /// <summary>Saldo del SAR del año 97. Se refiere a las aportaciones realizadas después de la reforma de 1997.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SaldoSAR97 { get; set; }
#nullable restore
#else
        public string SaldoSAR97 { get; set; }
#endif
        /// <summary>Saldo total del SAR. Es la suma de todas las aportaciones realizadas a la cuenta individual del trabajador, incluyendo las del SAR 92 y SAR 97, junto con los rendimientos generados. Representa el monto total disponible en la cuenta de ahorro para el retiro del trabajador.</summary>
        public float? SaldoSARTotal { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Api.Infonavit.Grupo.ObtenerCuenta.ObtenerCuentaPostResponse_data"/> and sets the default values.
        /// </summary>
        public ObtenerCuentaPostResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Api.Infonavit.Grupo.ObtenerCuenta.ObtenerCuentaPostResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Api.Infonavit.Grupo.ObtenerCuenta.ObtenerCuentaPostResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Api.Infonavit.Grupo.ObtenerCuenta.ObtenerCuentaPostResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aportacion", n => { Aportacion = n.GetStringValue(); } },
                { "bimestre", n => { Bimestre = n.GetStringValue(); } },
                { "fechaPago", n => { FechaPago = n.GetStringValue(); } },
                { "NSS", n => { NSS = n.GetIntValue(); } },
                { "nombreEmpresa", n => { NombreEmpresa = n.GetStringValue(); } },
                { "saldoAnterior", n => { SaldoAnterior = n.GetStringValue(); } },
                { "saldoSAR92", n => { SaldoSAR92 = n.GetStringValue(); } },
                { "saldoSAR97", n => { SaldoSAR97 = n.GetStringValue(); } },
                { "saldoSARTotal", n => { SaldoSARTotal = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("aportacion", Aportacion);
            writer.WriteStringValue("bimestre", Bimestre);
            writer.WriteStringValue("fechaPago", FechaPago);
            writer.WriteStringValue("nombreEmpresa", NombreEmpresa);
            writer.WriteIntValue("NSS", NSS);
            writer.WriteStringValue("saldoAnterior", SaldoAnterior);
            writer.WriteStringValue("saldoSAR92", SaldoSAR92);
            writer.WriteStringValue("saldoSAR97", SaldoSAR97);
            writer.WriteFloatValue("saldoSARTotal", SaldoSARTotal);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
