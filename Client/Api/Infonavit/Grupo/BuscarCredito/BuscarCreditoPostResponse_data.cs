// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Api.Infonavit.Grupo.BuscarCredito
{
    #pragma warning disable CS1591
    public class BuscarCreditoPostResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Apellido materno del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApMaterno { get; set; }
#nullable restore
#else
        public string ApMaterno { get; set; }
#endif
        /// <summary>Apellido paterno del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApPaterno { get; set; }
#nullable restore
#else
        public string ApPaterno { get; set; }
#endif
        /// <summary>Correo electrónico personal del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailPersonal { get; set; }
#nullable restore
#else
        public string EmailPersonal { get; set; }
#endif
        /// <summary>nulo (no cuenta con crédito), AC (cuenta con crédito)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EstatusCredito { get; set; }
#nullable restore
#else
        public string EstatusCredito { get; set; }
#endif
        /// <summary>Fecha de cierre del crédito en formato YYYYMMDD, puede estar vacío si el crédito está activo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FechaCierre { get; set; }
#nullable restore
#else
        public string FechaCierre { get; set; }
#endif
        /// <summary>Fecha de origen del crédito en formato YYYYMMDD</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FechaOrigen { get; set; }
#nullable restore
#else
        public string FechaOrigen { get; set; }
#endif
        /// <summary>Número total de meses en los que el derechohabiente no ha hecho su contribución</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mesesomisos { get; set; }
#nullable restore
#else
        public string Mesesomisos { get; set; }
#endif
        /// <summary>Tipo de moneda en la que está denotado el crédito</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Moneda { get; set; }
#nullable restore
#else
        public string Moneda { get; set; }
#endif
        /// <summary>Nombre del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nombre { get; set; }
#nullable restore
#else
        public string Nombre { get; set; }
#endif
        /// <summary>Número de Seguro Social del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nss { get; set; }
#nullable restore
#else
        public string Nss { get; set; }
#endif
        /// <summary>Número del crédito asignado</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NumCredito { get; set; }
#nullable restore
#else
        public string NumCredito { get; set; }
#endif
        /// <summary>En el contexto de instituciones crediticias, es el identificador asignado al conjunto de préstamos hipotecarios que se agrupan para ser vendidos como un producto de inversión</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pool { get; set; }
#nullable restore
#else
        public string Pool { get; set; }
#endif
        /// <summary>Tipo de crédito que ofrece el INFONAVIT, en tu caso, Hipotecaria Total (HiTo)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Producto { get; set; }
#nullable restore
#else
        public string Producto { get; set; }
#endif
        /// <summary>Régimen de amortización que puede ser ROA (Régimen ordinario de Amortización) o REA (Régimen especial de Amortización)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Regimen { get; set; }
#nullable restore
#else
        public string Regimen { get; set; }
#endif
        /// <summary>Registro Federal de Contribuyentes del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rfc { get; set; }
#nullable restore
#else
        public string Rfc { get; set; }
#endif
        /// <summary>CURP del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scurp { get; set; }
#nullable restore
#else
        public string Scurp { get; set; }
#endif
        /// <summary>Situación actual del crédito</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Situacioncredito { get; set; }
#nullable restore
#else
        public string Situacioncredito { get; set; }
#endif
        /// <summary>Número de teléfono celular del solicitante</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TelefonoCelular { get; set; }
#nullable restore
#else
        public string TelefonoCelular { get; set; }
#endif
        /// <summary>El conjunto de modalidades que INFONAVIT maneja: Hipotecario (estándar), COFINAVIT, COFINAVIT INGRESOS ADICIONALES, INFONAVIT TOTAL, TU SEGUNDO CRÉDITO INFONAVIT</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TipoCredito { get; set; }
#nullable restore
#else
        public string TipoCredito { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Api.Infonavit.Grupo.BuscarCredito.BuscarCreditoPostResponse_data"/> and sets the default values.
        /// </summary>
        public BuscarCreditoPostResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Api.Infonavit.Grupo.BuscarCredito.BuscarCreditoPostResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Api.Infonavit.Grupo.BuscarCredito.BuscarCreditoPostResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Api.Infonavit.Grupo.BuscarCredito.BuscarCreditoPostResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apMaterno", n => { ApMaterno = n.GetStringValue(); } },
                { "apPaterno", n => { ApPaterno = n.GetStringValue(); } },
                { "emailPersonal", n => { EmailPersonal = n.GetStringValue(); } },
                { "estatus_credito", n => { EstatusCredito = n.GetStringValue(); } },
                { "fechaCierre", n => { FechaCierre = n.GetStringValue(); } },
                { "fechaOrigen", n => { FechaOrigen = n.GetStringValue(); } },
                { "mesesomisos", n => { Mesesomisos = n.GetStringValue(); } },
                { "moneda", n => { Moneda = n.GetStringValue(); } },
                { "nombre", n => { Nombre = n.GetStringValue(); } },
                { "nss", n => { Nss = n.GetStringValue(); } },
                { "num_credito", n => { NumCredito = n.GetStringValue(); } },
                { "pool", n => { Pool = n.GetStringValue(); } },
                { "producto", n => { Producto = n.GetStringValue(); } },
                { "regimen", n => { Regimen = n.GetStringValue(); } },
                { "rfc", n => { Rfc = n.GetStringValue(); } },
                { "scurp", n => { Scurp = n.GetStringValue(); } },
                { "situacioncredito", n => { Situacioncredito = n.GetStringValue(); } },
                { "telefonoCelular", n => { TelefonoCelular = n.GetStringValue(); } },
                { "tipo_credito", n => { TipoCredito = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apMaterno", ApMaterno);
            writer.WriteStringValue("apPaterno", ApPaterno);
            writer.WriteStringValue("emailPersonal", EmailPersonal);
            writer.WriteStringValue("estatus_credito", EstatusCredito);
            writer.WriteStringValue("fechaCierre", FechaCierre);
            writer.WriteStringValue("fechaOrigen", FechaOrigen);
            writer.WriteStringValue("mesesomisos", Mesesomisos);
            writer.WriteStringValue("moneda", Moneda);
            writer.WriteStringValue("nombre", Nombre);
            writer.WriteStringValue("nss", Nss);
            writer.WriteStringValue("num_credito", NumCredito);
            writer.WriteStringValue("pool", Pool);
            writer.WriteStringValue("producto", Producto);
            writer.WriteStringValue("regimen", Regimen);
            writer.WriteStringValue("rfc", Rfc);
            writer.WriteStringValue("scurp", Scurp);
            writer.WriteStringValue("situacioncredito", Situacioncredito);
            writer.WriteStringValue("telefonoCelular", TelefonoCelular);
            writer.WriteStringValue("tipo_credito", TipoCredito);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
