// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaPosts.Client.Models
{
    #pragma warning disable CS1591
    public class DocProbatorioData : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The anioReg property</summary>
        public int? AnioReg { get; set; }
        /// <summary>The claveEntidadRegistro property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClaveEntidadRegistro { get; set; }
#nullable restore
#else
        public string ClaveEntidadRegistro { get; set; }
#endif
        /// <summary>The claveMunicipioRegistro property</summary>
        public int? ClaveMunicipioRegistro { get; set; }
        /// <summary>The entidadRegistro property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntidadRegistro { get; set; }
#nullable restore
#else
        public string EntidadRegistro { get; set; }
#endif
        /// <summary>The foja property</summary>
        public int? Foja { get; set; }
        /// <summary>The libro property</summary>
        public int? Libro { get; set; }
        /// <summary>The municipioRegistro property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MunicipioRegistro { get; set; }
#nullable restore
#else
        public string MunicipioRegistro { get; set; }
#endif
        /// <summary>The numActa property</summary>
        public int? NumActa { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="KiotaPosts.Client.Models.DocProbatorioData"/> and sets the default values.
        /// </summary>
        public DocProbatorioData()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="KiotaPosts.Client.Models.DocProbatorioData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static KiotaPosts.Client.Models.DocProbatorioData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new KiotaPosts.Client.Models.DocProbatorioData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "anioReg", n => { AnioReg = n.GetIntValue(); } },
                { "claveEntidadRegistro", n => { ClaveEntidadRegistro = n.GetStringValue(); } },
                { "claveMunicipioRegistro", n => { ClaveMunicipioRegistro = n.GetIntValue(); } },
                { "entidadRegistro", n => { EntidadRegistro = n.GetStringValue(); } },
                { "foja", n => { Foja = n.GetIntValue(); } },
                { "libro", n => { Libro = n.GetIntValue(); } },
                { "municipioRegistro", n => { MunicipioRegistro = n.GetStringValue(); } },
                { "numActa", n => { NumActa = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("anioReg", AnioReg);
            writer.WriteStringValue("claveEntidadRegistro", ClaveEntidadRegistro);
            writer.WriteIntValue("claveMunicipioRegistro", ClaveMunicipioRegistro);
            writer.WriteStringValue("entidadRegistro", EntidadRegistro);
            writer.WriteIntValue("foja", Foja);
            writer.WriteIntValue("libro", Libro);
            writer.WriteStringValue("municipioRegistro", MunicipioRegistro);
            writer.WriteIntValue("numActa", NumActa);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
